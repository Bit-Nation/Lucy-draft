pragma solidity ^0.4.18;            // Because contracts on a blockchain are there forever, I believe you set this to a 
                                    // specific minimum version so you don't end up having a contract called in the future
                                    // that is not supported by a then-current version of Solidity, thereby causing problems
                                    // later on. 

    /**
     * See the README file for detailed overview and status as well as open topics 
     * 
     */




    /**
     * Declaring the contract "Lucy"
     * 
     * Incomplete: 2% progress
     *
     * Eventually, and per the notes above, Lucy's completed core functionality will be nested within the following contract 
     * declaration. Over time expect more sections/functions to be added here as they are completed. 
     * 
     * What I do not yet know is which existing contracts that may need to be referenced from Lucy to be functional, for example:
     * do we need to call a contract so Lucy knows what PoA, PoN, and PoC are?
     */ 


contract Lucy {


    /** 
     * (1) INITIALIZING ACTOR "TYPES"
     * 
     * Incomplete: 60% progress. 
     */

    address Citizen;
    address Witness;
    address Arbitrator;         // I intend to use a struct to simplify this, plus I'm not sure this is done correctly 
    address Agreement;          // eg: may be missing uint statements
    address LegalCode;
    address Nation;
    address initiatingActor;
    // need to define other parties for purposes of token dist - TODO 

    /**
     * explicitly eliminated "nations" for now, but will need to be addressed. Also needed: multiple witnesses (with hard limit)
     */

    enum actorChoice { Citizen, Witness, Abritrator, Agreement, LegalCode } // "Nations" would be added here  


    /**
     * Assume "citizen" if not explicitly specified, which seems dangerous. I'd rather require that the actor type be explicitly
     * defined, else we have a corner case where a nation can review the fitness of a citizen via a PoA
     */

    actorChoice constant defaultChoice = actorChoice.Citizen;   
    function setActorType(uint _actorChoice) public {                                                                                                      // not obvious to me how the calling Dapp has an 
        initiatingActor = msg.sender;                   // "msg.sender" is the entity that calls the contact, ergo:
    }                                                   // "initiatingActor" is the entity that called the contract 
                                                        // I just need to figure out how to make sure the Dapp properly
                                                        // reports or references the actor "type" to Lucy (so nations aren't
                                                        // treated like citizens, etc)


    /**
     * 
     */
    function getChoice() public returns (actorChoice) {
    }

    function getDefaultChoice() public returns (uint) {
        return uint(defaultChoice);
    }




 
     /**
      * (2) INITIALIZING TOKEN TYPE PER ACTOR (PoA, PoC, PoN)
      * 
      * Incomplete: 30% complete 
      */

    function setTokenType() private returns (uint) {
        uint tokenType;
        uint PoA;
        uint PoC;
        uint PoN;
        
    if ((actorChoice == Citizen) || (actorChoice == Witness) || (actorChoice == Arbitrator)) { // may be multiple witnesses
         tokenType = PoA;
    }
          else {
              if ((actorChoice == Agreement) || (actorChoice == LegalCode)) {
            tokenType = PoN;
        }
              if (actorChoice == Nation)         // this merits discussion. We need to account for PoC, but I don't think I
            tokenType = PoC;                   // want the PoC evaluating the fitness of citizens
     }
    }





    /**
     * (3) SANTITY CHECKS AND SELF-PROTECTION  
     * 
     * Incomplete: 5% complete
     */


function lucyProtect() public {                        // I believe this protects us from being run unless there's ether, else it's thrown
    if(msg.value != 0.001 ether) 
        revert; }    


    /**
     * Calls or defines an agreementRegistry, which I assume is stored on IPFS, per the documentation. Need to get my
     * head around how this functions, but assume it's a precursor to the planned Exocortex
     * 
     * If this IS the precursor to the Exocortex, then we need to start being thoughtful about its stewardship in terms of 
     * access limitations, the aggregate expense of contract execution, and especially storage costs; we will need to likely 
     * start segmenting data by logical area so they can be cost-effectively referenced and utilized later, so as to not
     * require forks and/or confusion later on.
     * 
     * Provenance: Johan's code sample (blog post)
     * 
     */ 

    mapping(bytes32 => address) agreementRegistry;  
                                                    
                                                 

    /**
     * Apparently verifies Lucy. I'll need to study how, as this came from Johan's code sample, and I need to better understand
     * how it functions and if it's adequate (and if it needs to be modified to accommodate the abstracted actors and tokens)
     * 
     */ 

    function verifyLucy () public {
        address agreementID;
        address agreementContract;
        Lucy.registerAgreement(agreementID, agreementContract);
        Lucy.agreementPoA(actorChoice[]);           // not properly abstracted by token - TODO 
    }




     /**
      * (4) FACILITATE CHAT INTERACTON BETWEEN TWO OR MORE ACTORS
      * 
      * Incomplete: 15% progress 
      */


    /**
     * Search for citizens, arbitrators, contracts, legal codes, and nations as well as their PoA, PoC, and PoN
     */
 
    event _viewedReputation (address indexed actorChoice, uint _tokenType); // This searches the transaction log in Ethereum 

    function viewReputation () public {
        _viewedReputation(actorChoice.tokenType);
    }

//    function searchCitizen () public {  // need to combine these two
//        _searchCitizen (actorChoice.tokenType);

//    }

    /**
     * Sets the agreement reward. I'd like to rewrite this to use the abstracted actors and abstracted token concepts
     * 
     * Povenance: comes from Johan's blog post
     * 
     */

    function agreementPoA () private { // need to research how to explicitly limit to  (onlyPangea)
    for(uint i = 0; i < actorChoice.length; i++) {
         tokenType.balanceOf[initiatingActor[i]] += agreementReward;  // not currently working: need to research 
    }
    }

    /**
     * Need to study this in depth and migrate it to how I'm handling this. Provenance: Johan's code
     * 
     */


    function newAgreement () private { 
         bytes32 _data;
         bytes32 _agreementID; 
        address[] _citizens;
        bytes32[] _agreementSignatures;
//    isTransactionFee;
    }

 
    /**
     * Registers an agreement between two parties, files it in the "agreementRegistry," which is 
     * apparently only within Pangea (don't exactly know how that's enforced at the present, but assume through access to 
     * a named contract)
     * 
     * Provenance: Johan, with modifications
     * 
     */

function collectAgreement () private {
    uint agreementID;
    agreementID = (something);      // Assume we'll generate a hashed value that will represent the agreement ID - undefined
    agreementContract = (something);// pull from the registry and/or allow them to upload one? undefined
}

  
function registerAgreement () private {
   bytes32 _agreementID; 
   address _agreementContract; 
 }

 function onlyPangea () private {
     agreementRegistry[_agreementID] = _agreementContract;
 }


function agreementPoA(address[] _citizens) private { // need to research how to explicitly limit to  (onlyPangea)
    for(uint i = 0; i < _citizens.length; i++) {
        address citizen;
        PoA.balanceOf[_citizens[i]] += agreementReward;
    }
}




    /**
     * (5) Lucy receives indication that the transaction has completed to the satisfaction of all concerned parties 
     * 
     * Incomplete: 0%
     * 
     * This could be built-in, but I'm not seeing it, and worry about the "long tail" of incomplete transactions that 
     * are either expensive or reflect poorly upon Bitnation '
     * 
     * 
     * Would be implicit to core contract, I believe
     * 
     */



    /**
     * (6) Lucy elicits a review of fitness and/or automatically assigns a fitness score to all actors
     * 
     * Incomplete: 25%
     * 
     * I was originally planning to modify the following code, which was originally borrowed from a reputation project on git, 
     * but it strikes me as as super complicated, so will probably simplify and/or borrow from Johan's ideas 
     *
     * The code appears to simply ask if the experience was positive or negative. If it's positive, it increments the reputation
     * score. If not, it decrements it. Pretty simple.
     *
     * I intend to add scales of subjective satisfaction (enum 0-5) plus a temporal parameter, and leverage Johan's code for token
     * value manipulation
     * 
     */

  event _positiveReputation(address indexed user, string indexed message);
  event _negativeReputation(address indexed user, string indexed message);




function giveReputation(address citizen_b, bool isPositive, string message) private {
    if(actorChoice == msg.sender
    && actorChoice.givenReputation == false){
        if(isPositive){
            citizen_b.PoA ++;
            citizen_b.messages.push(message);
            _positiveReputation(citizen_b,message);
        }
    }
    else{
    citizen_b.negative ++;
        citizen_b.messages.push(message);
        _negativeReputation(citizen_b,message);
    }
}


    /**
     * (7) Lucy assigns reputation tokens to actors, distributes them to actors through an Oracle 
     * 
     * Incomplete: 20% 
     * 
     * Needs rewardAmount, to make sure the actorChoice and tokenType works, plus that we're actually calling
     * the Oracle, plus a few sanity checks in terms of token distribution. Plus probably lots of other stuff 
     * 
     * Intend to leverage Johan's code sample 
     * 
     */

    /**
     * Distribute tokens (PoA, PoN, PoC)
     * 
     * rewardAmount is not yet defined and this logic is all kinds of broken at the moment 
     */
   
    function distToken(address actorChoice) {              // this is a derivative of Johan's code sample, and incomplete
    PoA.balanceOf[_actorChoice.tokenType] += rewardAmount;          // take citizen_a's PoA and add to it the rewardAmount (which is not currently
                                                        // defined in this contract), and make that the new value - TODO
    }
    
    function distPoA(address _citizen_b) {              // this is a derivative of Johan's code sample, and incomplete
    PoA.balanceOf[_citizen_b] += rewardAmount;          // take citizen_a's PoA and add to it the rewardAmount (which is not currently
                                                        // defined in this contract), and make that the new value - TODO
    }


     
}







