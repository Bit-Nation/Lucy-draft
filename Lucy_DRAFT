pragma solidity ^0.4.18;      


contract Lucy  is PoA, PoC, PoN { // We'll need to either author, or produce the referenced contracts of "PoA, PoC, PoN"

    /**
     * See the README file for detailed overview and status as well as open topics 
     * 
     */


    /** 
     * (1) INITIALIZING ACTOR "TYPES," DEFINING THE ACTORS, ASSOCIATING ACTORS WITH TOKENS
     * 
     * Incomplete: 60% progress. 
     * 
     * Goals:
     *  (a) abstract actor from type (citizen; witness(es); arbitrator; code of law; nation) 
     *  (b) define the actors within the scope of an agreement (a contract) between two or more parties (two or more parties?)
     *  (c) associate the proper token with each actor type (PoA, PoC, PoN)
     * 
     * Primary user interaction 
     *  - via mobile Dapp (RPC calls provided by mobile app - reference (TBD git location?) for more info)
     * 
     */

    /**
     * (1)(a) DEFINE THE ACTORS AND THEIR TYPES 
     * 
     */
    
    struct Actor {
        byte actorType; // Citizen, Arbitrator, Legal Code, Agreement, Nation 
        address addr;
        uint tokenType; // I'll associate the proper tokenType per actorType
        bool canRate;   // Some actors can't provide a rating (PoN)
        bool isWitness; // Has the actor opted in to being a witness?
        bool isDapp;    // possible vector - placeholder until I think this through entirely
    }
    
    /**
     * TODO: work on mapping keys to values for the sake of simplicity and economy 
     * 
     */
     
    mapping (address => Actor) public actorStruct;
        function actorValues(address addr) public constant returns(bool isIndeed) {
    return actorStruct[addr].isEntity;  // pretty sure this doesn't work TODO
    }

    /**
     * TODO: learn how to have the calling Dapp / contract deliver the needed values for this contract to function 
     * 
     */

    struct submittedInfo {
        address actorType;  // I expect the Dapp to capture and send the actorType (Citizen, Arbitrator,etc)
        uint tokenType;     // Based upon actorType we'll populate tokenType
        bool isWitness;     // Has the citizen selected chosen to participate as a witness?
                            // May be other values. Need to think about this further
    }








    
    /**
     * Receive payment in ether for use of contract. Required definition  
     * 
     */
      
    function lucyFee() payable costs(price) {       //broken - TODO  
        registeredAddresses[msg.sender] = true;
    }


    /**
     * (3) SANTITY CHECKS AND SELF-PROTECTION  
     * 
     * Incomplete: 5% complete
     */


function lucyProtect() public {                        // I believe this protects us from being run unless there's ether, else it's thrown
    if(msg.value != 0.001 ether) 
        revert; }    


    /**
     * Calls or defines an agreementRegistry, which I assume is stored on IPFS, per the documentation. Need to get my
     * head around how this functions, but assume it's a precursor to the planned Exocortex
     * 
     * If this IS the precursor to the Exocortex, then we need to start being thoughtful about its stewardship in terms of 
     * access limitations, the aggregate expense of contract execution, and especially storage costs; we will need to likely 
     * start segmenting data by logical area so they can be cost-effectively referenced and utilized later, so as to not
     * require forks and/or confusion later on.
     * 
     * Provenance: Johan's code sample (blog post)
     * 
     */ 

    mapping(bytes32 => address) agreementRegistry;  
                                                    
                                                 

    /**
     * Apparently verifies Lucy. I'll need to study how, as this came from Johan's code sample, and I need to better understand
     * how it functions and if it's adequate (and if it needs to be modified to accommodate the abstracted actors and tokens)
     * 
     */ 

    function verifyLucy () public {
        address agreementID;
        address agreementContract;
        Lucy.registerAgreement(agreementID, agreementContract);
        Lucy.agreementPoA(actorChoice[]);           // not properly abstracted by token - TODO 
    }





    /**
     * Sets the agreement reward. I'd like to rewrite this to use the abstracted actors and abstracted token concepts
     * 
     * Povenance: comes from Johan's blog post
     * 
     */

    function agreementPoA () private { // need to research how to explicitly limit to  (onlyPangea)
    for(uint i = 0; i < actorChoice.length; i++) {
         tokenType.balanceOf[initiatingActor[i]] += agreementReward;  // not currently working: need to research 
    }
    }

    /**
     * Need to study this in depth and migrate it to how I'm handling this. Provenance: Johan's code
     * 
     */


    function newAgreement () private { 
         bytes32 _data;
         bytes32 _agreementID; 
        address[] _citizens;
        bytes32[] _agreementSignatures;
//    isTransactionFee;
    }

 
    /**
     * Registers an agreement between two parties, files it in the "agreementRegistry," which is 
     * apparently only within Pangea (don't exactly know how that's enforced at the present, but assume through access to 
     * a named contract)
     * 
     * Provenance: Johan, with modifications
     * 
     */

function collectAgreement () private {
    uint agreementID;
    agreementID = (something);      // Assume we'll generate a hashed value that will represent the agreement ID - undefined
    agreementContract = (something);// pull from the registry and/or allow them to upload one? undefined
}

  
function registerAgreement () private {
   bytes32 _agreementID; 
   address _agreementContract; 
 }

 function onlyPangea () private {
     agreementRegistry[_agreementID] = _agreementContract;
 }


function agreementPoA(address[] _citizens) private { // need to research how to explicitly limit to  (onlyPangea)
    for(uint i = 0; i < _citizens.length; i++) {
        address citizen;
        PoA.balanceOf[_citizens[i]] += agreementReward;
    }
}




    /**
     * (5) Lucy receives indication that the transaction has completed to the satisfaction of all concerned parties 
     * 
     * Incomplete: 0%
     * 
     * This could be built-in, but I'm not seeing it, and worry about the "long tail" of incomplete transactions that 
     * are either expensive or reflect poorly upon Bitnation '
     * 
     * 
     * Would be implicit to core contract, I believe
     * 
     */



    /**
     * (6) Lucy elicits a review of fitness and/or automatically assigns a fitness score to all actors
     * 
     * Incomplete: 25%
     * 
     * I was originally planning to modify the following code, which was originally borrowed from a reputation project on git, 
     * but it strikes me as as super complicated, so will probably simplify and/or borrow from Johan's ideas 
     *
     *
     * I intend to add scales of subjective satisfaction (enum 0-5) plus a temporal parameter, and leverage Johan's code for token
     * value manipulation
     * 
     */

  event _positiveReputation(address indexed user, string indexed message);





function giveReputation(address citizen_b, bool isPositive, string message) private {
    if(actorChoice == msg.sender
    && actorChoice.givenReputation == false){
        if(isPositive){
            citizen_b.PoA ++;
            citizen_b.messages.push(message);
            _positiveReputation(citizen_b,message);
        }
    }
    

    /**
     * (7) Lucy assigns reputation tokens to actors, distributes them to actors through an Oracle 
     * 
     * Incomplete: 20% 
     * 
     * Needs rewardAmount, to make sure the actorChoice and tokenType works, plus that we're actually calling
     * the Oracle, plus a few sanity checks in terms of token distribution. Plus probably lots of other stuff 
     * 
     * Intend to leverage Johan's code sample 
     * 
     */

    /**
     * Distribute tokens (PoA, PoN, PoC)
     * 
     * rewardAmount is not yet defined and this logic is all kinds of broken at the moment 
     */
   
    function distToken(address actorChoice) {              // this is a derivative of Johan's code sample, and incomplete
    PoA.balanceOf[_actorChoice.tokenType] += rewardAmount;          // take citizen_a's PoA and add to it the rewardAmount (which is not currently
                                                        // defined in this contract), and make that the new value - TODO
    }
    
    function distPoA(address _citizen_b) {              // this is a derivative of Johan's code sample, and incomplete
    PoA.balanceOf[_citizen_b] += rewardAmount;          // take citizen_a's PoA and add to it the rewardAmount (which is not currently
                                                        // defined in this contract), and make that the new value - TODO
    }


     
}







